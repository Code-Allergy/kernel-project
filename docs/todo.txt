CRITICAL:
blocking processes on events - for ipc, hardware
 - need per process kernel stacks to make sure we return to where we were in the kernel

block device for mmc so we aren't cheating with the fat32 driver directly and can more easily support other filesystems

debug elf loading - data section access error? loading unknown address
proper syscall trace functionality with ability to listen to only certain processes

waitpid syscall for shell functionality
process should free all memory on exit, but stay alive until waitpid comes over. if it never does, it will stay in the process table forever
 - in the future, we need a reaper that will clean up these processes

kernel should allocate initial file descriptors for processes, not userspace lib. userspace lib allocating them means exec will have duplicate fd's
 - along with this, we should expose a tty device that handles some of the printing and input for the shell, rather than polling/waiting for individual characters.

a data abort handler that isn't fucking useless

general:
managed stacks for all kernel modes instead of static (system, irq, svc, abt, und)
ipc to support message passing between processes
memory allocation apis for processes - increase heap size, etc
load dynamic libraries
test context switch performance
other data structures to make things easier
cleaning up dead code and refactoring some others

- better mmu setup, and using sections and domains. sections for kernel mem mapping and we can setup support for larger page sizes for user space OR sections for heap

- heap allocation (user and kernel both need allocators)

- once we have exec and (even faked) direct vfs to fat32 access, make userspace testing program to check for regressions

distant:
- commandline arguments for processes
- signals
