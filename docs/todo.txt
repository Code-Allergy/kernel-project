CRITICAL:
need to handle more accurate timing, right now we have scheduler ticks which are expensive to reduce and still
not very accurate. I need to be able to get that counter working and then use it to implement sleep() and usleep() among
other blocking features.

ipc to support message passing between processes
memory allocation apis for processes - increase heap size, etc
load dynamic libraries
test context switch performance
other data structures to make things easier
cleaning up dead code and refactoring some others
- pass in addresses from bootloader for l1 and l2 page tables,
  then copy them and nuke the bss section ? for now just put them in high phys memory

- better mmu setup, and using sections and domains. sections for kernel mem mapping and we can setup support for larger page sizes for user space OR sections for heap

- heap allocation (user and kernel both need allocators)

- once we have exec and (even faked) direct vfs to fat32 access, make userspace testing program to check for regressions

distant:
- commandline arguments for processes
- signals
